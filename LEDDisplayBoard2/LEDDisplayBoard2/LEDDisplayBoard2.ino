#include <Arduino.h>

/*
   LEDDisplayBoard2.ino
   TEI3M 15/16 exam, but in AVR assembly
   It's just barrels of fun

   code by:
   Robert Raffaele 'GorrillaRibs' Miller

   ACES 2016/17
   STATUS: Working

   Delays generated by delay loop calculator
   at http://www.bretmulvey.com/avrdelay.html,
   and modified to use other registers
 */

// I had defined pin names in a vain attempt to make asm readable.
// The compiler did not like this.
/*
 #define clock 0x02 // or pin 2
 #define latch 0x03 // or pin 3
 #define data 0x04 // or pin 4
 */


// some variables to store things in aint it cool
uint8_t data1 = 0; // data for the first shift register
uint8_t data2 = 0; // data for the second shift register
uint8_t data3 = 0; // maybe you can guess what this one is for

// EVEN AN ARRAY TOO WOW
uint8_t LEDs[12]; // create an array for LEDs
// NOBODY CARED ABOUT ME UNTIL I PUT ON THE MASK
uint8_t mask = 0b00000001;

// Some other variables, so I can load registers under 15
// with 'constants'
uint8_t one = 0x01;
uint8_t two = 0x02;
uint8_t three = 0x03;
uint8_t four = 0x04;
uint8_t twelve = 0xC;

void setup() {

        asm (

                // ** HERE IT BEGINS ** \\
                // **     THE END    ** \\
                // **  OF ZA WARUDO  ** \\

                // ** Equivient of 'Void Setup' in original exam code ** \\

                "LDS r1, one \n" // loading 'constants' for comparisons
                "LDS r2, two \n" // who needs registers above r15 anyways
                "LDS r3, three \n"
                "LDS r4, four \n"
                "CLR r5 \n" // dontcha love loop counters
                "CLR r8 \n" // clear a zero register for comaparisons/clearing bytes
                "CLR r9 \n" // loop counters are like my favourite things
                "LDS r12, twelve \n"
                "CLR r14 \n" // lets get some zeroes up in dis boi
                "CLR r15 \n"
                "LDS r21, mask \n"  // AND mask
                "LDI r23, 0xFF \n" // load 0xFF, to set portD as output
                "LDI r25, 0x08 \n" // Use as loop counter
                "CLR r27 \n" // how many times shiftOut has looped? r27 knows
                "CLR r28 \n" // a loop counter for shiftData
                "CLR r29 \n" // another loop counter for shiftData (we need two, obviously)
                "LDI r30, lo8(LEDs) \n" // WOOT INDIREKT ADDRESSES YE
                "LDI r31, hi8(LEDs) \n" // AREN'T THEY BEUTIFUL

                "OUT 0x0A, r23 \n" // set portD as output


                // ** Here we actually send out the data ** \\
                // ** Equivient to 'void loop' in original exam code ** \\

                "mainForward: \n" // first main loop

                "RCALL clearData \n" // clear the data to start with


                "shifting: \n" // start shifting down the tracks

                "ST Z, r1 \n" // save 1 into Z reg
                "RCALL shiftData \n" // set data, then shift

                "RCALL delay200 \n" // delay for 200 seconds
                "ST Z, r8 \n" // save 0 into Z reg
                "RCALL shiftData \n" // keep going through that... YOU GET THE IT
                "RCALL delay200 \n"
                "ST Z, r1 \n"
                "RCALL shiftData \n"
                "RCALL delay200 \n"
                "ST Z, r8 \n"
                "RCALL shiftData \n"
                "RCALL delay200 \n"
                "ST Z+, r1 \n"
                "RCALL shiftData \n"
                "INC r5 \n"
                "CPSE r5, r12 \n"
                "RJMP shifting \n"

                "mainBackward: \n" // Seoncd main loop. Like the first, but backwards.

                "RCALL delay2000 \n" // wait for the train to turn around
                "RCALL clearData \n" // from here, continue as the other loop, but backwards

                "shifting2: \n"

                "ST Z, r1 \n"
                "RCALL shiftData \n"
                "ST Z, r8 \n"
                "RCALL shiftData \n"
                "ST Z, r1 \n"
                "RCALL shiftData \n"
                "ST Z, r8 \n"
                "RCALL shiftData \n"
                "ST Z, r1 \n"
                "DEC r30 \n" // Post-decrementing throws an error, so manually doing it
                "RCALL shiftData \n"
                "DEC r5 \n"
                "CPSE r5, r8 \n"
                "RJMP shifting2 \n"
                "RCALL delay2000 \n" // wait for train to turn around
                "RJMP mainForward \n" // jump back to forward


                // ** Clear array cells ** \\

                "clearData: \n" // Does this /really/ need an explaination?

                "STS LEDs, r8 \n" // r8 is zero, by the way
                "STS LEDs+1, r8 \n"
                "STS LEDs+2, r8 \n"
                "STS LEDs+3, r8 \n"
                "STS LEDs+4, r8 \n"
                "STS LEDs+5, r8 \n"
                "STS LEDs+6, r8 \n"
                "STS LEDs+7, r8 \n"
                "STS LEDs+8, r8 \n"
                "STS LEDs+9, r8 \n"
                "STS LEDs+10, r8 \n"
                "STS LEDs+11, r8 \n"
                "RET \n"


                // ** Setting each data variable, then shift it out ** \\

                "shiftData: \n" // Must prepare a sacrifice to Cthulu before you continue,
                                // otherwise this won't work.

                "LD r16, Z+ \n" // get the address, post-increment
                "CP r16, r13 \n"
                "BRNE thing \n"
                "INC r14 \n"

                "thing: \n" // figure out how many times to shift left

                "INC r14 \n"
                "CP r28, r1 \n"
                "BREQ leftShift1 \n"
                "CP r28, r2 \n"
                "BREQ leftShift2 \n"
                "CP r28, r3 \n"
                "BREQ leftShift3 \n"
                "backFromShifitng: \n"
                "CP r28, r4 \n"
                "BREQ endOfThing \n"
                "INC r28 \n"
                "ADD r15, r14 \n"
                "CLR r14 \n"
                "RJMP thing \n"

                "endOfThing: \n" // figure out which data byte to save to

                "CP r29, r2 \n"
                "BREQ saveData3 \n"
                "CP r29, r1 \n"
                "BREQ saveData2 \n"
                "CP r29, r8 \n"
                "BREQ saveData1 \n"
                "backFromSave: \n"
                "INC r29 \n"
                "CP r29, r3 \n" // all data has been saved, so...
                "BREQ shiftOutData1 \n" // ...jump to shiftOut
                "CLR r14 \n"
                "CLR r15 \n"
                "RJMP shiftData \n"

                "saveData1: \n"
                "STS data1, r15 \n"
                "RJMP backFromSave \n"

                "saveData2: \n"
                "STS data2, r15 \n"
                "RJMP backFromSave \n"

                "saveData3: \n"
                "STS data3, r15 \n"
                "RJMP backFromSave \n"

                "leftShift1: \n" // left shift twice
                "LSL r14 \n"
                "LSL r14 \n"
                "RJMP backFromShifitng \n"

                "leftShift2: \n" // left shift four times
                "LSL r14 \n"
                "LSL r14 \n"
                "LSL r14 \n"
                "LSL r14 \n"
                "RJMP backFromShifitng \n"

                "leftShift3: \n" // left shift six times
                "LSL r14 \n"
                "LSL r14 \n"
                "LSL r14 \n"
                "LSL r14 \n"
                "LSL r14 \n"
                "LSL r14 \n"
                "RJMP backFromShifitng \n"


                // ** shiftOut() ** \\

                "shiftOutData1: \n" // shift out the first  data var...
                "LDS r11, data1 \n"
                "RCALL shiftOut \n"

                "shiftOutData2: \n" // ...then the second...
                "LDS r11, data2 \n"
                "RCALL shiftOut \n"

                "shiftOutData3: \n" // ...then the third.
                "LDS r11, data3 \n"
                "RCALL shiftOut \n"

                "shiftOut: \n"

                "CBI 0x0B, 0x03 \n" // set latch low
                "CBI 0x0B, 0x02 \n" // set clock low
                "MOV r15, r11 \n" // copy the data, so we dont destory it
                "AND r15, r21 \n" // mask the data, so we only get one byte
                "CP r15, r8 \n" // compare the ANDed data with zero
                "BREQ set0 \n" // if equal to zero, go to set0...
                "SBI 0x0B, 0x04 \n" // else, set the data pin to one
                "RJMP back \n" // go to back

                "set0: \n"

                "CBI 0x0B, 0x04 \n" // set the data pin to zero
                "RJMP back \n" // go to back (irrelevant?)
                "back: \n"
                "DEC r25 \n" // increment the loop counter
                "CP r25, r8 \n" // see if I've looped enough
                "BREQ stopShifting \n" // go to the end
                "LSL r21 \n" // shift the mask left
                "SBI 0x0B, 0x02 \n" // set clock high
                "RJMP shiftOut \n" // jump back to the start of this loop

                // ** END OF SHIFTING ** \\

                "stopShifting: \n" // here be a label

                "INC r27 \n" // inc the loop counter
                "CP r27, r1 \n" // check if it's one
                "BREQ shiftOutData2 \n" // shift out data2
                "CP r27, r2 \n" // check if it's two
                "BREQ shiftOutData3 \n" // shift out data3
                "SBI 0x0B, 0x03 \n" // set latch back to high
                "RET \n"

                // ** DELAYS ** \\
                // ** no explaination needed, just wasting cycles ** \\

                "delay200: \n"
                "LDI r18, 17 \n"
                "LDI r19, 60 \n"
                "LDI r20, 203 \n"
                "1: \n"
                "DEC r20 \n"
                "BRNE 1b \n"
                "DEC  r19 \n"
                "BRNE 1b \n"
                "DEC  r18 \n"
                "BRNE 1b \n"
                "NOP \n"

                "delay2000: \n"
                "LDI r18, 163 \n"
                "LDI r19, 87 \n"
                "LDI r20, 2 \n"
                "1: \n"
                "DEC r20 \n"
                "BRNE 1b \n"
                "DEC r19 \n"
                "BRNE 1b \n"
                "DEC r18 \n"
                "BRNE 1b \n"
                "RJMP 1f \n"
                "1: \n"


                );

}

void loop() {
}
